
build/output.elf:     file format elf32-littlearm


Disassembly of section .init:

00008000 <_start>:
    8000:	ea00001f 	b	8084 <main>

Disassembly of section .text:

00008004 <GetGpioAddress>:
    8004:	e59f0074 	ldr	r0, [pc, #116]	; 8080 <SetGpio+0x3c>
    8008:	e1a0f00e 	mov	pc, lr

0000800c <SetGpioFunction>:
    800c:	e3500035 	cmp	r0, #53	; 0x35
    8010:	93510007 	cmpls	r1, #7
    8014:	81a0f00e 	movhi	pc, lr
    8018:	e1a02000 	mov	r2, r0
    801c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    8020:	ebfffff7 	bl	8004 <GetGpioAddress>

00008024 <functionLoop$>:
    8024:	e3520009 	cmp	r2, #9
    8028:	8242200a 	subhi	r2, r2, #10
    802c:	82800004 	addhi	r0, r0, #4
    8030:	8afffffb 	bhi	8024 <functionLoop$>
    8034:	e0822082 	add	r2, r2, r2, lsl #1
    8038:	e1a01211 	lsl	r1, r1, r2
    803c:	e5801000 	str	r1, [r0]
    8040:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

00008044 <SetGpio>:
    8044:	e3500035 	cmp	r0, #53	; 0x35
    8048:	81a0f00e 	movhi	pc, lr
    804c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    8050:	e1a02000 	mov	r2, r0
    8054:	ebffffea 	bl	8004 <GetGpioAddress>
    8058:	e1a032a2 	lsr	r3, r2, #5
    805c:	e1a03103 	lsl	r3, r3, #2
    8060:	e0800003 	add	r0, r0, r3
    8064:	e202201f 	and	r2, r2, #31
    8068:	e3a03001 	mov	r3, #1
    806c:	e1a03213 	lsl	r3, r3, r2
    8070:	e3310000 	teq	r1, #0
    8074:	05803028 	streq	r3, [r0, #40]	; 0x28
    8078:	1580301c 	strne	r3, [r0, #28]
    807c:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
    8080:	20200000 	.word	0x20200000

00008084 <main>:
    8084:	e3a0d902 	mov	sp, #32768	; 0x8000
    8088:	eb000005 	bl	80a4 <OKinit>

0000808c <loop$>:
    808c:	eb000009 	bl	80b8 <OKon>
    8090:	eb000019 	bl	80fc <slightPause>
    8094:	eb00000c 	bl	80cc <OKoff>
    8098:	eb000017 	bl	80fc <slightPause>
    809c:	eb00000f 	bl	80e0 <OKblink>
    80a0:	eafffff9 	b	808c <loop$>

000080a4 <OKinit>:
    80a4:	e92d4003 	push	{r0, r1, lr}
    80a8:	e3a00010 	mov	r0, #16
    80ac:	e3a01001 	mov	r1, #1
    80b0:	ebffffd5 	bl	800c <SetGpioFunction>
    80b4:	e8bd8003 	pop	{r0, r1, pc}

000080b8 <OKon>:
    80b8:	e92d4003 	push	{r0, r1, lr}
    80bc:	e3a00010 	mov	r0, #16
    80c0:	e3a01000 	mov	r1, #0
    80c4:	ebffffde 	bl	8044 <SetGpio>
    80c8:	e8bd8003 	pop	{r0, r1, pc}

000080cc <OKoff>:
    80cc:	e92d4003 	push	{r0, r1, lr}
    80d0:	e3a00010 	mov	r0, #16
    80d4:	e3a01001 	mov	r1, #1
    80d8:	ebffffd9 	bl	8044 <SetGpio>
    80dc:	e8bd8003 	pop	{r0, r1, pc}

000080e0 <OKblink>:
    80e0:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    80e4:	ebfffff8 	bl	80cc <OKoff>
    80e8:	ebfffff2 	bl	80b8 <OKon>
    80ec:	eb000002 	bl	80fc <slightPause>
    80f0:	ebfffff5 	bl	80cc <OKoff>
    80f4:	eb000000 	bl	80fc <slightPause>
    80f8:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

000080fc <slightPause>:
    80fc:	e92d4001 	push	{r0, lr}
    8100:	e3a000c8 	mov	r0, #200	; 0xc8
    8104:	eb000005 	bl	8120 <WaitForMilliSeconds>
    8108:	e8bd8001 	pop	{r0, pc}

0000810c <WaitForSeconds>:
    810c:	e59f203c 	ldr	r2, [pc, #60]	; 8150 <while$1+0x14>
    8110:	e0010290 	mul	r1, r0, r2
    8114:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    8118:	eb000005 	bl	8134 <WaitForMicroseconds>
    811c:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

00008120 <WaitForMilliSeconds>:
    8120:	e3a02ffa 	mov	r2, #1000	; 0x3e8
    8124:	e0010290 	mul	r1, r0, r2
    8128:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    812c:	eb000000 	bl	8134 <WaitForMicroseconds>
    8130:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

00008134 <WaitForMicroseconds>:
    8134:	e59f4018 	ldr	r4, [pc, #24]	; 8154 <while$1+0x18>
    8138:	e1c460d4 	ldrd	r6, [r4, #4]

0000813c <while$1>:
    813c:	e1c4a0d4 	ldrd	sl, [r4, #4]
    8140:	e04ac006 	sub	ip, sl, r6
    8144:	e15c0001 	cmp	ip, r1
    8148:	9afffffb 	bls	813c <while$1>
    814c:	e1a0f00e 	mov	pc, lr
    8150:	000f4240 	.word	0x000f4240
    8154:	20003000 	.word	0x20003000
