
build/output.elf:     file format elf32-littlearm


Disassembly of section .init:

00008000 <_start>:
    8000:	ea000055 	b	815c <main>

Disassembly of section .text:

00008004 <InitialiseFrameBuffer>:
    8004:	e3500a01 	cmp	r0, #4096	; 0x1000
    8008:	93510a01 	cmpls	r1, #4096	; 0x1000
    800c:	93520020 	cmpls	r2, #32
    8010:	83a00000 	movhi	r0, #0
    8014:	81a0f00e 	movhi	pc, lr
    8018:	e92d4010 	push	{r4, lr}
    801c:	e59f403c 	ldr	r4, [pc, #60]	; 8060 <InitialiseFrameBuffer+0x5c>
    8020:	e5840000 	str	r0, [r4]
    8024:	e5841004 	str	r1, [r4, #4]
    8028:	e5840008 	str	r0, [r4, #8]
    802c:	e584100c 	str	r1, [r4, #12]
    8030:	e5842014 	str	r2, [r4, #20]
    8034:	e1a00004 	mov	r0, r4
    8038:	e2800101 	add	r0, r0, #1073741824	; 0x40000000
    803c:	e3a01001 	mov	r1, #1
    8040:	eb000029 	bl	80ec <MailboxWrite>
    8044:	e3a00001 	mov	r0, #1
    8048:	eb000034 	bl	8120 <MailboxRead>
    804c:	e3300000 	teq	r0, #0
    8050:	13a00000 	movne	r0, #0
    8054:	18bd8010 	popne	{r4, pc}
    8058:	e1a00004 	mov	r0, r4
    805c:	e8bd8010 	pop	{r4, pc}
    8060:	000082b0 	.word	0x000082b0

00008064 <GetGpioAddress>:
    8064:	e59f0074 	ldr	r0, [pc, #116]	; 80e0 <SetGpio+0x3c>
    8068:	e1a0f00e 	mov	pc, lr

0000806c <SetGpioFunction>:
    806c:	e3500035 	cmp	r0, #53	; 0x35
    8070:	93510007 	cmpls	r1, #7
    8074:	81a0f00e 	movhi	pc, lr
    8078:	e1a02000 	mov	r2, r0
    807c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    8080:	ebfffff7 	bl	8064 <GetGpioAddress>

00008084 <functionLoop$>:
    8084:	e3520009 	cmp	r2, #9
    8088:	8242200a 	subhi	r2, r2, #10
    808c:	82800004 	addhi	r0, r0, #4
    8090:	8afffffb 	bhi	8084 <functionLoop$>
    8094:	e0822082 	add	r2, r2, r2, lsl #1
    8098:	e1a01211 	lsl	r1, r1, r2
    809c:	e5801000 	str	r1, [r0]
    80a0:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

000080a4 <SetGpio>:
    80a4:	e3500035 	cmp	r0, #53	; 0x35
    80a8:	81a0f00e 	movhi	pc, lr
    80ac:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    80b0:	e1a02000 	mov	r2, r0
    80b4:	ebffffea 	bl	8064 <GetGpioAddress>
    80b8:	e1a032a2 	lsr	r3, r2, #5
    80bc:	e1a03103 	lsl	r3, r3, #2
    80c0:	e0800003 	add	r0, r0, r3
    80c4:	e202201f 	and	r2, r2, #31
    80c8:	e3a03001 	mov	r3, #1
    80cc:	e1a03213 	lsl	r3, r3, r2
    80d0:	e3310000 	teq	r1, #0
    80d4:	05803028 	streq	r3, [r0, #40]	; 0x28
    80d8:	1580301c 	strne	r3, [r0, #28]
    80dc:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
    80e0:	20200000 	.word	0x20200000

000080e4 <GetMailboxBase>:
    80e4:	e59f006c 	ldr	r0, [pc, #108]	; 8158 <rightmail$+0x24>
    80e8:	e1a0f00e 	mov	pc, lr

000080ec <MailboxWrite>:
    80ec:	e310000f 	tst	r0, #15
    80f0:	11a0f00e 	movne	pc, lr
    80f4:	e351000f 	cmp	r1, #15
    80f8:	81a0f00e 	movhi	pc, lr
    80fc:	e1a02000 	mov	r2, r0
    8100:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    8104:	ebfffff6 	bl	80e4 <GetMailboxBase>

00008108 <wait1$>:
    8108:	e5903018 	ldr	r3, [r0, #24]
    810c:	e3130102 	tst	r3, #-2147483648	; 0x80000000
    8110:	1afffffc 	bne	8108 <wait1$>
    8114:	e0822001 	add	r2, r2, r1
    8118:	e5802020 	str	r2, [r0, #32]
    811c:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

00008120 <MailboxRead>:
    8120:	e350000f 	cmp	r0, #15
    8124:	81a0f00e 	movhi	pc, lr
    8128:	e1a01000 	mov	r1, r0
    812c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    8130:	ebffffeb 	bl	80e4 <GetMailboxBase>

00008134 <rightmail$>:
    8134:	e5902018 	ldr	r2, [r0, #24]
    8138:	e3120101 	tst	r2, #1073741824	; 0x40000000
    813c:	1afffffc 	bne	8134 <rightmail$>
    8140:	e5902000 	ldr	r2, [r0]
    8144:	e202300f 	and	r3, r2, #15
    8148:	e1330001 	teq	r3, r1
    814c:	1afffff8 	bne	8134 <rightmail$>
    8150:	e3c2000f 	bic	r0, r2, #15
    8154:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
    8158:	2000b880 	.word	0x2000b880

0000815c <main>:
    815c:	e3a0d902 	mov	sp, #32768	; 0x8000
    8160:	eb000022 	bl	81f0 <OKinit>
    8164:	e3a00b01 	mov	r0, #1024	; 0x400
    8168:	e3a01c03 	mov	r1, #768	; 0x300
    816c:	e3a02010 	mov	r2, #16
    8170:	ebffffa3 	bl	8004 <InitialiseFrameBuffer>
    8174:	eb00002c 	bl	822c <OKblink>
    8178:	e3300000 	teq	r0, #0
    817c:	1a00000c 	bne	81b4 <noError$>
    8180:	e3a00010 	mov	r0, #16
    8184:	e3a01001 	mov	r1, #1
    8188:	ebffffb7 	bl	806c <SetGpioFunction>
    818c:	e3a00010 	mov	r0, #16
    8190:	e3a01000 	mov	r1, #0
    8194:	ebffffc2 	bl	80a4 <SetGpio>

00008198 <error$>:
    8198:	eb000019 	bl	8204 <OKon>
    819c:	eb000029 	bl	8248 <slightPause>
    81a0:	eb000028 	bl	8248 <slightPause>
    81a4:	eb000027 	bl	8248 <slightPause>
    81a8:	eb00001a 	bl	8218 <OKoff>
    81ac:	eb000025 	bl	8248 <slightPause>
    81b0:	eafffff8 	b	8198 <error$>

000081b4 <noError$>:
    81b4:	e1a04000 	mov	r4, r0

000081b8 <render$>:
    81b8:	eb00000c 	bl	81f0 <OKinit>
    81bc:	e5943020 	ldr	r3, [r4, #32]
    81c0:	e3a01c03 	mov	r1, #768	; 0x300

000081c4 <drawRow$>:
    81c4:	e3a02b01 	mov	r2, #1024	; 0x400

000081c8 <drawPixel$>:
    81c8:	e1c300b0 	strh	r0, [r3]
    81cc:	e2833002 	add	r3, r3, #2
    81d0:	e2422001 	sub	r2, r2, #1
    81d4:	e3320000 	teq	r2, #0
    81d8:	1afffffa 	bne	81c8 <drawPixel$>
    81dc:	e2411001 	sub	r1, r1, #1
    81e0:	e2800001 	add	r0, r0, #1
    81e4:	e3310000 	teq	r1, #0
    81e8:	1afffff5 	bne	81c4 <drawRow$>
    81ec:	eafffff1 	b	81b8 <render$>

000081f0 <OKinit>:
    81f0:	e92d4003 	push	{r0, r1, lr}
    81f4:	e3a00010 	mov	r0, #16
    81f8:	e3a01001 	mov	r1, #1
    81fc:	ebffff9a 	bl	806c <SetGpioFunction>
    8200:	e8bd8003 	pop	{r0, r1, pc}

00008204 <OKon>:
    8204:	e92d4003 	push	{r0, r1, lr}
    8208:	e3a00010 	mov	r0, #16
    820c:	e3a01000 	mov	r1, #0
    8210:	ebffffa3 	bl	80a4 <SetGpio>
    8214:	e8bd8003 	pop	{r0, r1, pc}

00008218 <OKoff>:
    8218:	e92d4003 	push	{r0, r1, lr}
    821c:	e3a00010 	mov	r0, #16
    8220:	e3a01001 	mov	r1, #1
    8224:	ebffff9e 	bl	80a4 <SetGpio>
    8228:	e8bd8003 	pop	{r0, r1, pc}

0000822c <OKblink>:
    822c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    8230:	ebfffff8 	bl	8218 <OKoff>
    8234:	ebfffff2 	bl	8204 <OKon>
    8238:	eb000002 	bl	8248 <slightPause>
    823c:	ebfffff5 	bl	8218 <OKoff>
    8240:	eb000000 	bl	8248 <slightPause>
    8244:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

00008248 <slightPause>:
    8248:	e92d4001 	push	{r0, lr}
    824c:	e3a000c8 	mov	r0, #200	; 0xc8
    8250:	eb000005 	bl	826c <WaitForMilliSeconds>
    8254:	e8bd8001 	pop	{r0, pc}

00008258 <WaitForSeconds>:
    8258:	e59f203c 	ldr	r2, [pc, #60]	; 829c <while$1+0x14>
    825c:	e0010290 	mul	r1, r0, r2
    8260:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    8264:	eb000005 	bl	8280 <WaitForMicroseconds>
    8268:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

0000826c <WaitForMilliSeconds>:
    826c:	e3a02ffa 	mov	r2, #1000	; 0x3e8
    8270:	e0010290 	mul	r1, r0, r2
    8274:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    8278:	eb000000 	bl	8280 <WaitForMicroseconds>
    827c:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

00008280 <WaitForMicroseconds>:
    8280:	e59f4018 	ldr	r4, [pc, #24]	; 82a0 <while$1+0x18>
    8284:	e1c460d4 	ldrd	r6, [r4, #4]

00008288 <while$1>:
    8288:	e1c4a0d4 	ldrd	sl, [r4, #4]
    828c:	e04ac006 	sub	ip, sl, r6
    8290:	e15c0001 	cmp	ip, r1
    8294:	9afffffb 	bls	8288 <while$1>
    8298:	e1a0f00e 	mov	pc, lr
    829c:	000f4240 	.word	0x000f4240
    82a0:	20003000 	.word	0x20003000
